// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/mtrx_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// mtrx_add_cpp
xt::rarray<double> mtrx_add_cpp(xt::rarray<double> x, xt::rarray<double> y);
RcppExport SEXP _mtrx_mtrx_add_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< xt::rarray<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< xt::rarray<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mtrx_add_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// mtrx_subtract_cpp
xt::rarray<double> mtrx_subtract_cpp(xt::rarray<double> x, xt::rarray<double> y);
RcppExport SEXP _mtrx_mtrx_subtract_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< xt::rarray<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< xt::rarray<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mtrx_subtract_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// mtrx_multiply_cpp
xt::rarray<double> mtrx_multiply_cpp(xt::rarray<double> x, xt::rarray<double> y);
RcppExport SEXP _mtrx_mtrx_multiply_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< xt::rarray<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< xt::rarray<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mtrx_multiply_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// mtrx_divide_cpp
xt::rarray<double> mtrx_divide_cpp(xt::rarray<double> x, xt::rarray<double> y);
RcppExport SEXP _mtrx_mtrx_divide_cpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< xt::rarray<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< xt::rarray<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mtrx_divide_cpp(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mtrx_mtrx_add_cpp", (DL_FUNC) &_mtrx_mtrx_add_cpp, 2},
    {"_mtrx_mtrx_subtract_cpp", (DL_FUNC) &_mtrx_mtrx_subtract_cpp, 2},
    {"_mtrx_mtrx_multiply_cpp", (DL_FUNC) &_mtrx_mtrx_multiply_cpp, 2},
    {"_mtrx_mtrx_divide_cpp", (DL_FUNC) &_mtrx_mtrx_divide_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_mtrx(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
